=============================Modelo Relacional===========================
entidade: é uma representação de um conjunto de informações sobre determinado conceito do sistema
Atributo: propriedades que descrevem cada membro de um conjunto de entidades

Cardinalidade(0, 1, 2): le uma das parte, e do extremo, le a cardinalidade junto com a outra entidade colada nela

Relacionamentos de 1-para-1 é uma troca de chaves
Relacionamento de 1-para-muitos, pega a PK de 1 e joga para muitos
Relacionamento de muitos-para-muitos, o relacioanamento vira uma entidade, criando pequenas entidades 1-para-muitos, seguindo a regrade 1-para-muitos

---4 principais regras de transações em um DB
Atomicidade: Tudo ou nada. Se qualquer parte da transação falhar, toda a transação é revertida.

Consistência: Estados válidos. A transação leva o banco de dados de um estado consistente a outro, preservando regras de integridade.

Isolamento: Independência. Transações simultâneas não se afetam, como se fossem executadas uma após a outra.

Durabilidade: Persistência. Após a confirmação, os resultados da transação são permanentes e sobrevivem a falhas.

chave multipla = chave estrangeira

Não podemos apagar um registro que esta em relacionamento
======================================================================


   Chaves:
PRIMARY KEY(PK) /Define qual é a chave primaria, no final

FOREIGN KEY (<var1>) REFERENCES | /<var1>: Variável do banco de dados que vai referenciar, <Fk>: Chave estrangeira(chave primaria de outra tabela)
departamento(<FK>))              |Precisasse definir as duas chaves primarias


==============================================================


---DDL (Data Definition Language):

CREATE DATABASE <nome>              |
DEFAULT CHARACTER SET utf8mb4       |/Cria um banco de dados, com acentuação brasileir
DEFAULT COLLATE utf8mb4_general_ci; |

drop database cadastro; /Execluir um banco de dados(tem que execultar em outro arquivo)

create table pessoa (Elementos); /Cria um tablela em um banco de dados

DROP TABLE <n_table> \Apagra tabela

ALTER TABLE <n_table>         | /Cria uma coluna no final
ADD COLUMN <n_column> <tipo>; |

ALTER TABLE <n_table>     | /Apagar coluna
DROP COLUMN <n_column>;   |

ALTER TABLE <n_table>               | /Cria uma coluna na primeira possição
ADD COLUMN <n_column> <tipo> FIRST; |

ALTER TABLE <n_table>               | /Adicionar como chave primária
ADD PRIMARY KEY(<n>);               |

ALTER TABLE <n_table>                | /Modificar o tipo da coluna
MODIFY COLUMN <n_column> <new_tipo>; |

ALTER TABLE <n_table>                           | /Alterar o nome e o tipo
CHANGE COLUMN <n_column> <new_name> <new_tipo>; |

ALTER TABLE <n>       |/Renomear tabela
RENAME TO <new_name>; |


(DEFAULT '<padrão>'); /Valores nuços dessa var iram receber o default
CHECK( <var> in (‘<var1>’, ‘<var2>’, ... '<varN>')) /restringir tais valores
UNIQUE /Evita valores duplicados
UNSIGNED /Não permite sinal, economizando bits

alter table <n_table>             |
add foreign key <n_column>        |/Transforma tal coluna em uma chave estrangeira, lembrando que a chave primaira desta devera existir
references <n_table2> <id_table2>;|

select <n_table>.<n_column>, <n_table>.<n_column2>, <n_table2>.<n_table>, <n_table2>.<n_column2> |
from <n_table> inner join <n_table2>                                                             |/mostra as colunas escolidas de cada tabela que estao em relacionamento, deixa bonito
on <n_table>.<PK> = <n_table2>.<PK>;                                                             |

Podemos trocar inner join por:
left outer /mostra as colunas escolidas de cada tabela que estao em relacionamento ou não, dando preferencia a esquerda(pode ser trocada por right), deixa bonitinho



==============================================================


---DML (Data Manipulation Language):

INSERT INTO pessoa                      |
(<var1>, <var2>, <var3>, ...)           | /Inserir dados em um BG
values                                  |
('<Rvar1>', '<Rvar2>', '<Rvar3>', ...); |

INSERT INTO pessoa                      |
(<var1>, <var2>, <var3>, ...)           | 
values                                  |
('<Rvar1>', '<Rvar2>', '<Rvar3>', ...), | /Inserir multiplos dados em um BG
('<Rvar1>', '<Rvar2>', '<Rvar3>', ...), |
('<Rvar1>', '<Rvar2>', '<Rvar3>', ...); |


select * from <n_table>; /mostra a tabela

DROP TABLE <n_table> /Apagar Tabela

desc /descrição da tebela, Prog

UPDATE <n_column>           |
SET <n_column> = 'new_name' |/Trocar valor na tabela
where <PK> = 'id_line';     |

UPDATE <n_table>                                           |
SET <n_column> = 'new_name', <n_column2> = <new_column2>   |/Trocar valores na tabela
where <PK> = 'id_line';                                    |

delete from <n_table>   |/apagar linha desejada
where <PK> = <id_line>; |

TRUNCATE TABLE <table>; |/Apaga todos os registros


---DQL:
'*' /seleciona todos

select * from <n_table>        |/orndena pela coluna, ordem alfabetica, (desc) opicional, só para ordenar em ordem alfabetica descrecente
order by <column> (desc):      |

select <n_column>, <n_column>, <n_column> from <table> |/filtra colunas pelo <column>, mostrand oa penas as <n_column>
order by <column>;                                     |

select * from <n_table>                             |
where <n_cloumn> <operador relacional> '<registro>' |/filtra linhas
order by <column>;                                  |

===operadores relacionais===
=
!=
=>
<=
betwenn '<cond>' and <cond2>;
in ('<cond>', '<cond2>', <cond3>);
<column> > '<cond>' and/ou <column2> < <cond2>; |exemplo
like '<first_word>%'; |Filtra pela primeira letra selecionada. like = parecido.trocando o porcento, voce ver as teminações daletra selecionada, deixando % em ambos os lados, mostra todos os registros a letra selecionada
not like
============================

select distinct <n_column> from <n_table>; /Mostra todos os registros, sem repetições

select function(<n_column>) from <n_table>;

===function===
COUNT() /Contar as ocorrencias
MAX() /O maior
MIN() /mínimo
SUM() /somar
AVG() /média



==============================================================


   Icrementos
not null /Obriga a digitar algo


==============================================================


Tipos Primiivos:
Numéricos:
	INT: Um número inteiro de tamanho regular.
	SMALLINT: Um número inteiro menor.
	BIGINT: Um número inteiro maior.
	TINYINT: Um número inteiro muito pequeno(3).
	MEDIUMINT: Um número inteiro de tamanhoe médio.
	DECIMAL: Um número decimal com precisão definida.
	FLOAT: Um número de ponto flutuante com precisão simples.
        DOUBLE e REAL: Números de ponto flutuante com precisão dupla.

Data/Tempo:
	DATE: Data (ano, mês, dia).
	TIME: Hora (hora, minuto, segundo).
	DATETIME: Combinação de data e hora.
	TIMESTAMP: Data e hora com fuso horário, geralmente usado para marcação temporal.
        YEAR: Ano.

Literais (Caracteres):
	CHAR: Cadeia de caracteres de comprimento fixo.
	VARCHAR: Cadeia de caracteres de comprimento variável.
	TEXT: Texto de comprimento variável, maior que VARCHAR.
        BLOB: Binário de dados grandes, usado para armazenar dados binários.

Espaciais:
	GEOMETRY: Tipo de dados espacial genérico.
	POINT: Um ponto em um espaço 2D.
	LINESTRING: Uma linha composta de um ou mais pontos.
	POLYGON: Um polígono, que é uma área fechada definida por uma série de pontos.
