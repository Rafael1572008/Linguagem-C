===estrutura===
include <stdio.h>
#include <stdlib.h>

int main()
{
    printf("Hello world!\n");
    scanf(<form>, &<v1>, &<v2>);

    return 0;
}
   ===
\a : toca um bipe
\b :backspace
\n :quebra de linha
\t tabulação de linha
\r :retorno ao inicio da linha
\0 :caracter nulo
\v :tabulação vertical

"&" serve para endereço de memoria

===especificador de formato===
"%d" :valor inteiro
"%f" :valor real
"%.2f%" :valor real comapenas duas casas
"%c" :Dados de texto (apenas uma letra)
"%s" :Dados de texto (palavras)
"%lf" :double
"%p" :Ponteiro 
"%e" :Notação ciêntifica

===tipos de dados===
carm +-127
int (shot) +-32.767
int (long) +-2.147.483.647
float +- 3,4 x 10³⁴
double +- 1,7x 10⁻³⁰⁸


<variavel> = <informação>; :atribuição
#deine <nome> <valor> :constantes

===Estrutura de decisão simples===
Sintaxe: if(se), else(senão):
if (condição¹ && condição²) {

} else{}

--condições---
Conjunção:("e" logico): if (condição¹ && condição²) {}
Disjunção("ou" logico): if (condição¹ || condição²) {}
inversão: (negação-"não-logico"): if (condição¹ ! condição²) [quando o operador e falso]

===switch-case(Escolha)===
//compareação de igualdade
Sintaxe:
switch (<var>) {
   case <v1>:
      [comando]
      break;
   case <v2>:
      [comando]
      break;
   case <v3>:
      [comando]
      break;
   ...
   case <vn>:
      [comando]
      break;
   defalut: (//Tipo um senão)
      [comando]
      break;
}

===especificadores logicos===
(a=b) -> (a==b);
(a<>b) -> (a!=b);

===repetição===
for(<var>=0; (<var>)<(Nf); <var>++){} / na parte (<var ++>, se for um numrro difirente de 1, digite (<var>=n))

===vetores===
Manipulação na definição de var
<Tipo> <nome>[<tamanho>] = [n, n1, n2 ,n3 ,n4...nn]

---Strings---
Tem que declarar o tamnho no char, se não ele salva apenas um caractere

Ex: se vc tiver uma string com 10 letras, ela tera q ter 11, pq vai ter no final "\0" sinalizando o final da palavra. "Não precisa de "&" no scanf

while(p[i] != '\0'){
        printf("%d = %c\n", i, p[i++]);
    } /comando para saber a onde termina a frase "\0". ele considera o espaço no final

sintaxe geral:
scanf("%s", <str>); \não precisa de "&", n use. ele para de ler no primeiro espaço. ainda por cima ele deixa passa o tamanho do vetor, dando erro

sintaxe aprimorada:
scanf("%<tam.-1>[^\n]s", <str>);

fgets(<string>, <tam + 1>, stdin) /ele ja coloca o \0 (stdin, entrada de dados padrão [teclado]). 1º onde desejo salvar, 2º o tamanho max. ele ja poem "\0"
Fflush(stdin); \ele inpede q "lixo" de outro scanf(%s) vá para o proximo

---usando A biblioteca (#string.h)
strcpy(<destino>, <origem>); /usado para alterar o conteudo de um string
strcat(<destino>, origem); /quando quero colar uma string na outra
strlen(<string>); /mostra o tamaho da strinf
<var> = strcmp(<string¹>, <string²>) comparar igualdade entre strings, se elas forem iguais, essa função vai emprimir o valor de 0. se a string 1 for menor q a 2, o valor e negativo. se a string 1 for maior que a 2, ele imprimi um valor positivo. (comapar caracter, EX: c vai ser maior que d)
strchar(); /retorna a primeira ocorê ncia

---A biblioteca #locale.h---
setlocale(LC_ALL, "portuguese"); /permite colocar acentos, recomandado colocar na primeiroa linha de comando

---ponteiro---
Ponteiros armazenam indereços de memoria. O tipo do ponteiro depende do tipo da variavel apontada por ele

*<var>

===break e continue===
f(condição){
    Break;
} /interrompe à repetição (toda)
--------------------------------
If(condição){
    Continue;
} /Ele passa para a próxima interação
